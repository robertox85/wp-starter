<?php
/**
 * Functions
 *
 * Main header file for the theme.
 *
 * @package WordPress
 */

/**
 * TRUE Per stampare gli stili o gli script caricati.
 */
define( 'WP_DEBUG_SCRIPTS', false );
define( 'WP_DEBUG_STYLES', false );




// include_once INCLUDE_PATH . '/class-helper.php';
// include_once INCLUDE_PATH . '/class-post-type-manager.php';












/**
 * Enqueue a script in the WordPress admin on edit.php.
 *
 * @param int $hook Hook suffix for the current admin page.
 */
function starter_enqueue_admin_script( $hook ) {
	wp_enqueue_script( 'admin_script', get_template_directory_uri() . '/assets/admin/js/admin.js', array(), '1.0' );
}
add_action( 'admin_enqueue_scripts', 'starter_enqueue_admin_script' );




/**
 * Assets
 *
 * @return void
 */
function assets() {
	 $inline_css = '';

	if ( have_rows( 'layouts' ) ) {
		$section_id = 1;
		while ( have_rows( 'layouts' ) ) {
			the_row();

			$styles = get_sub_field( 'section_styles' );

			$inline_css .= "#content-section-{$section_id} {";

			if ( ! empty( $styles['background_image'] ) ) {
				$inline_css .= "background-image: url({$styles['background_image']['url']});";
			}

			$inline_css .= "
                background-color: {$styles['background_color']};
                border-style: {$styles['border_style']};
                border-color: {$styles['border_color']};
                border-width: {$styles['border_width']};
                margin: {$styles['margin']};
                padding: {$styles['padding']};
            ";

			$inline_css .= '}';
			$section_id++;
		}
	}

	wp_add_inline_style( 'style', $inline_css );

}
// add_action('wp_enqueue_scripts', 'assets');









/**
 * Ordino gli evento per data_inizio.
 *
 * @param WP_Post $query elenco post.
 */
function starter_posts_orderby( $query ) {
	if ( ! is_admin() || ! $query->is_main_query() ) {
		return;
	}

	if ( 'data_inizio' === $query->get( 'orderby' ) ) {
		$query->set( 'orderby', 'meta_value' );
		$query->set( 'meta_key', 'data_inizio' );
		$query->set( 'meta_type', 'numeric' );
	}
}
add_action( 'pre_get_posts', 'starter_posts_orderby' );

/**
 * Undocumented function
 *
 * @param  [type] $post_id
 * @return void
 */
function get_titolo( $post_id ) {
	$titolo_args = array();
	if ( have_rows( 'attributi', $post_id ) ) {
		while ( have_rows( 'attributi', $post_id ) ) {
			the_row();
			$titolo_args['titolo_id']    = get_sub_field( 'attributi_contenuto_id' );
			$titolo_args['titolo_class'] = get_sub_field( 'attributi_contenuto_classe' );
		}
	}
	return $titolo_args;
}

function stampa_tag_titolo( $titolo_args ) {
	switch ( $titolo_args['html_tag'] ) {
		case 'p':
			// code...
			printf( '<p id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</p>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h1':
			// code...
			printf( '<h1 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h1>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h2':
			// code...
			printf( '<h2 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h2>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h3':
			// code...
			printf( '<h3 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h3>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h4':
			// code...
			printf( '<h4 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h4>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h5':
			// code...
			printf( '<h5 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h5>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		case 'h6':
			// code...
			printf( '<h6 id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</h6>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
		default:
			// code...
			printf( '<p id="%s" class="section color__primary %s">' . esc_html( $titolo_args['titolo'] ) . '</p>', esc_attr( $titolo_args['titolo_id'] ), esc_attr( $titolo_args['titolo_class'] ) );
			break;
	}
}

function get_cta( $post_id ) {
	$cta = array();
	if ( have_rows( 'gruppo_cta', $post_id ) ) {
		while ( have_rows( 'gruppo_cta', $post_id ) ) {
			the_row();

			$cta['cta_etichetta'] = get_sub_field( 'cta_etichetta' );
			$cta['cta_link']      = ( get_sub_field( 'link_interno_o_esterno' ) === 'interno' ) ? get_sub_field( 'link_interno' ) : get_sub_field( 'link_esterno' );

			if ( have_rows( 'bottone_semplice', $post_id ) ) {
				while ( have_rows( 'bottone_semplice', $post_id ) ) {
					the_row();

					if ( get_sub_field( 'background' ) === 'solid' ) {
						$cta['bottone_semplice']['background_class'] = get_sub_field( 'background_class' );
					}

					if ( get_sub_field( 'background' ) === 'outline' ) {
						$cta['bottone_semplice']['background_class'] = get_sub_field( 'outline_class' );
					}
				}
			}

			if ( have_rows( 'bottone_icona', $post_id ) ) {
				while ( have_rows( 'bottone_icona', $post_id ) ) {
					the_row();
					$cta['bottone_icona']['cta_icona']    = get_sub_field( 'cta_icona' );
					$cta['bottone_icona']['rounded_icon'] = ( get_sub_field( 'cta_icona_standard' ) === 'rounded' ) ? 'button--rounded-icon' : '';
				}
			}

			if ( get_sub_field( 'cta_tipo' ) === 'simple' ) {
				unset( $cta['bottone_icona'] );
			}

			if ( get_sub_field( 'cta_tipo' ) === 'icon' ) {
				unset( $cta['bottone_semplice'] );
			}
		}
	}

	return $cta;
}


/**
 * Ordina due date. I campi che prende in considerazione sono quelli
 * impostati di default dal tema e quello di Events Manager.
 *
 * @param  WP_POST $post_1
 * @param  WP_POST $post_2
 * @return void
 */
function sort_dates( $post_1, $post_2 ) {
	$data1 = ( ! empty( get_field( 'evento_data_data_inizio', $post_1->ID ) ) ) ? get_field( 'evento_data_data_inizio', $post_1->ID ) : get_field( '_event_start_date', $post_1->ID );
	$data2 = ( ! empty( get_field( 'evento_data_data_inizio', $post_2->ID ) ) ) ? get_field( 'evento_data_data_inizio', $post_2->ID ) : get_field( '_event_start_date', $post_2->ID );

	return strtotime( $data2 ) - strtotime( $data1 );
}

function get_ajax_calendar( $args ) {
	// Init ajax
	ob_start();

	$ajax = false;
	// Controlla la chiamata AJAX
	if ( ! empty( $_SERVER['HTTP_X_REQUESTED_WITH'] ) && strtolower( $_SERVER['HTTP_X_REQUESTED_WITH'] ) == 'xmlhttprequest' ) {
		$ajax = true;
	}
	$php_calendar = new PHPCalendario();

	$calendar_html = $php_calendar->get_calendar_html();

	$calendar_html .= ob_get_clean();
	echo $calendar_html;

	if ( $ajax ) {
		die();
	}
}
add_action( 'wp_ajax_nopriv_get_ajax_calendar', 'get_ajax_calendar' );
add_action( 'wp_ajax_get_ajax_calendar', 'get_ajax_calendar' );

add_shortcode( 'calendario', 'calendario' );
function calendario( $atts ) {
	$php_calendar = new PHPCalendario();
	$calendar_html = $php_calendar->get_calendar_html();
	echo $calendar_html;

}

/*
 * Lists out the handles for all enqueued styles and scripts.
 * Credit: http://wordpress.stackexchange.com/questions/54064/how-do-i-get-the-handle-for-all-enqueued-scripts
*/
function wp_inspect_scripts() {
	if ( WP_DEBUG_SCRIPTS ) {
		global $wp_scripts;
		echo '<pre><h1>Script Handles</h1><ul>';
		foreach ( $wp_scripts->queue as $handle ) :
			echo '<li>' . $handle . '</li>';
		endforeach;
		echo '</ul></pre>';
	}

}
add_action( 'wp_print_scripts', 'wp_inspect_scripts' );

function wp_inspect_styles() {
	if ( WP_DEBUG_STYLES ) {
		global $wp_styles;
		echo '<pre><h1>Style Handles</h1><ul>';
		foreach ( $wp_styles->queue as $handle ) :
			echo '<li>' . $handle . '</li>';
		  endforeach;
		echo '</ul></pre>';
	}

}
add_action( 'wp_print_styles', 'wp_inspect_styles' );


function pre( $text, $stop = false ) {
	echo '<pre>';
	print_r( $text );
	echo '</pre>';
	if ( $stop ) {
		exit;
	}
}


// $GLOBALS['wp_widget_factory'] is created just before 'after_setup_theme' hook is called
// but after the theme functions.php is read
// This fires late enough so you can include ACFW in a theme
// @see wp-settings.php
add_action( 'after_setup_theme', 'starter_widget_factory_load', 0, 0 );
function starter_widget_factory_load() {
	$GLOBALS['wp_widget_factory'] = Starter_Widget_Factory::get_instance();
}

function starter_register_widget( $widget_class, $params ) {
	/**
 * @var Tribe_WP_Widget_Factory $wp_widget_factory
*/
	global $wp_widget_factory;
	$wp_widget_factory->register( $widget_class, $params );
}


add_action( 'widgets_init', 'starter_widgets' );
function starter_widgets() {
	$acfw_query = new WP_Query(
		array(
			'post_type' => 'acf_widgetss',
			// shouldn't have more than 100 widgets...but just in case
			'posts_per_page' => apply_filters( 'starter_query_count', 100 ),
			'post_status' => 'publish',
		)
	);

	$results = $acfw_query->posts;

	foreach ( $results as $result ) :

		$params = array();

		$params['title'] = esc_attr( $result->post_title );
		$params['description'] = esc_attr( $result->post_excerpt );
		$params['slug'] = $result->post_name;
		$params['id'] = $result->ID;

		// var_dump($params);

		starter_register_widget( 'Starter_Widget', $params );

	endforeach;

}






